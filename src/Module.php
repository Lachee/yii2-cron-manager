<?php

namespace gaxz\crontab;

use gaxz\crontab\components\RouteExtractor;
use yii2tech\crontab\CronTab;

/**
 * Crontab manager module class
 */
class Module extends \yii\base\Module
{
    /**
     * @var string|array Namespaces with classnames of console controllers
     */
    public $source;

    /**
     * @var array Routes excluded from list 
     */
    public $excluded = [];

    /**
     * @var array Custom list of routes to console commands
     */
    public $routes = [];

    /**
     * @var string Unix command for handling output
     * @example ">> /var/log/app.log" will make the line look like: * * * * * * php yii /crontab/exec 1 >> /var/log/app.log
     * Which will write execution output to the file  
     */
    public $outputSetting;

    /**
     * This will work only in case PHP script is running from privileged user (e.g. 'root')
     * @var string Crontab user to apply
     */
    public $crontabUsername;

    /**
     * @var string Path to yii bootstrap file
     */
    public $yiiBootstrapAlias = '@app/yii';

    /**
     * @var string Path to php binary
     */
    public $phpBin = PHP_BINDIR . "/php";

    /**
     * Crontab header message to merge with $headlines
     * @see Crontab $headLines
     * @var array
     */
    public $headerMessage = [
        "# The content below is generated by crontab module of yii2 application.",
        "# Editing these lines manually will break synchronization between cron and application."
    ];

    /**
     * Crontab settings that will appear after $headerMessage
     * @see Crontab $headLines
     * @var array
     */
    public $headLines = [];

    /**
     * {@inheritdoc}
     */
    public $controllerNamespace = 'gaxz\crontab\controllers';

    /**
     * {@inheritdoc}
     */
    public $defaultRoute = 'cron-task';

    /**
     * {@inheritdoc}
     */
    public function init()
    {
        parent::init();

        if (\Yii::$app instanceof \yii\console\Application) {
            $this->controllerNamespace = 'gaxz\crontab\commands';
        }

        if (empty($this->routes)) {
            $this->getRouteFromSource();
        }
    }

    /**
     * Populate routes from list of sources
     */
    protected function getRouteFromSource(): void
    {
        $extractor = new RouteExtractor();

        foreach ((array) $this->source as $class) {
            $this->routes = array_merge($this->routes, $extractor->getRoutes($class));
        }
    }

    /**
     * Console route to execution script (gaxz\crontab\commands\ExecController)
     */
    public function getExecRoute(): string
    {
        return "/{$this->id}/exec";
    }

    /**
     * Path to yii2 bootstrap file
     */
    public function getYiiBootstrap(): string
    {
        return \Yii::getAlias($this->yiiBootstrapAlias);
    }

    /**
     * Crontab headers
     */
    public function getCrontabHeader(): array
    {
        return array_merge($this->headerMessage, $this->headLines);
    }
}
